<div class="calendar-section">
    <div class="calendar-grid">
        <div class="calendar-left-panel">
            <div class="calendar-container">
                <div class="calendar-header">
                    <button id="prevMonth" class="calendar-nav-btn">&lt;</button>
                    <h3 id="currentMonth">Month Year</h3>
                    <button id="nextMonth" class="calendar-nav-btn">&gt;</button>
                </div>
                <div class="calendar-body">

                    <div class="days"></div>
                </div>
            </div>

            <div class="dashboard-time-grid">
                <!-- Time slots will be dynamically inserted here -->
            </div>
        </div>

        <div class="bookings-panel">
            <h3 id="selectedDate">Select a date to view bookings</h3>
            <div id="bookingsList" class="bookings-list">
                <!-- Booking details will be shown here -->
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const calendar = {
            currentDate: new Date(),
            selectedDate: null,

            init() {
                this.setupCalendarControls();
                this.renderCalendar();
                this.loadBookings();

                // Automatically select the current date
                const today = new Date();
                const formattedDate = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
                this.selectDate(formattedDate);
            },

            setupCalendarControls() {
                document.getElementById('prevMonth').addEventListener('click', () => {
                    this.currentDate.setMonth(this.currentDate.getMonth() - 1);
                    this.renderCalendar();
                });

                document.getElementById('nextMonth').addEventListener('click', () => {
                    this.currentDate.setMonth(this.currentDate.getMonth() + 1);
                    this.renderCalendar();
                });
            },

            renderCalendar() {
                const year = this.currentDate.getFullYear();
                const month = this.currentDate.getMonth();

                // Update month/year display
                const monthNames = ["January", "February", "March", "April", "May", "June",
                    "July", "August", "September", "October", "November", "December"];
                document.getElementById('currentMonth').textContent = `${monthNames[month]} ${year}`;

                // Calculate days
                const firstDay = new Date(year, month, 1);
                const lastDay = new Date(year, month + 1, 0);
                const daysGrid = document.querySelector('.days');
                daysGrid.innerHTML = '';

                // Add the days of the month
                for (let day = 1; day <= lastDay.getDate(); day++) {
                    const dayElement = this.createDayElement(day);
                    const dateString = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;

                    dayElement.dataset.date = dateString;
                    dayElement.addEventListener('click', () => this.selectDate(dateString));

                    if (this.isToday(year, month, day)) {
                        dayElement.classList.add('today');
                    }

                    daysGrid.appendChild(dayElement);
                }
            },

            createDayElement(content) {
                const div = document.createElement('div');
                div.className = 'day';
                div.textContent = content;
                return div;
            },

            isToday(year, month, day) {
                const today = new Date();
                return today.getFullYear() === year &&
                    today.getMonth() === month &&
                    today.getDate() === day;
            },

            async selectDate(dateString) {
                this.selectedDate = dateString;
                document.querySelectorAll('.day').forEach(day => {
                    day.classList.remove('selected');
                    if (day.dataset.date === dateString) {
                        day.classList.add('selected');
                    }
                });

                // Update bookings panel
                const formattedDate = new Date(dateString).toLocaleDateString('en-US', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
                document.getElementById('selectedDate').textContent = formattedDate;

                // Load all bookings for the selected date
                await this.loadBookings(dateString);
            },

            async loadBookings(date = null) {
                const bookingsList = document.getElementById('bookingsList');
                if (!date) {
                    return;
                }

                try {
                    const subdomain = '<%= userSubdomain %>';
                    const response = await fetch(`/api/bookings/${subdomain}/${date}`);

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const bookings = await response.json();
                    this.renderTimeGrid(bookings);

                } catch (error) {
                    console.error('Error loading bookings:', error);
                    bookingsList.innerHTML = '<p class="error">Failed to load bookings</p>';
                }
            },

            renderTimeGrid(bookings) {
                const timeGrid = document.querySelector('.dashboard-time-grid');
                timeGrid.innerHTML = '';

                // Create a time slots row container
                const timeRow = document.createElement('div');
                timeRow.className = 'time-slots-row';

                // Create a map of all booked time slots including duration
                const bookedTimeSlots = new Map();
                bookings.forEach(booking => {
                    const [hours, minutes] = booking.time.split(':').map(Number);
                    const durationInMinutes = booking.duration || 60;

                    // Calculate how many 15-minute slots this booking spans
                    const slotsToBook = Math.ceil(durationInMinutes / 15);

                    // Mark each 15-minute slot within the booking duration as booked
                    for (let i = 0; i < slotsToBook; i++) {
                        const slotMinutes = minutes + (i * 15);
                        const slotHours = hours + Math.floor(slotMinutes / 60);
                        const slotMinutesNormalized = slotMinutes % 60;

                        const timeString = `${String(slotHours).padStart(2, '0')}:${String(slotMinutesNormalized).padStart(2, '0')}`;
                        bookedTimeSlots.set(timeString, booking);
                    }
                });

                // Create 24 hours worth of 15-minute slots
                for (let hour = 0; hour < 24; hour++) {
                    for (let minute of [0, 15, 30, 45]) {
                        const timeString = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;
                        const booking = bookedTimeSlots.get(timeString);

                        const timeSlot = document.createElement('div');
                        timeSlot.className = `dashboard-time-slot ${booking ? (
                            booking.status === 'completed' ? 'completed' : 
                            booking.status === 'cancelled' ? 'cancelled' : 'booked'
                        ) : ''}`;

                        const timeDisplay = document.createElement('span');
                        timeDisplay.className = 'dashboard-time-display';
                        timeDisplay.textContent = timeString;

                        const status = document.createElement('span');
                        status.className = 'dashboard-status';
                        status.textContent = booking ? (
                            booking.status === 'completed' ? 'Completed' : 
                            booking.status === 'cancelled' ? 'Cancelled' : 'Booked'
                        ) : '';

                        timeSlot.appendChild(timeDisplay);
                        timeSlot.appendChild(status);

                        if (booking) {
                            timeSlot.addEventListener('click', () => {
                                document.querySelectorAll('.dashboard-time-slot').forEach(slot => {
                                    slot.classList.remove('selected');
                                });
                                timeSlot.classList.add('selected');
                                this.showBookingsForTimeSlot([booking]);
                            });
                        }

                        timeRow.appendChild(timeSlot);
                    }
                }

                timeGrid.appendChild(timeRow);
                this.showAllBookings(bookings);
            },

            showBookingsForTimeSlot(bookings) {
                const bookingsList = document.getElementById('bookingsList');
                bookingsList.innerHTML = this.generateBookingsHTML(bookings);
            },

            showAllBookings(bookings) {
                const bookingsList = document.getElementById('bookingsList');
                bookingsList.innerHTML = this.generateBookingsHTML(bookings);
            },

            generateBookingsHTML(bookings) {
                if (bookings.length === 0) {
                    return '<p class="no-bookings">No bookings for this selection</p>';
                }

                return bookings.map(booking => {
                    // Parse start time
                    const [hours, minutes] = booking.time.split(':').map(Number);
                    const duration = parseInt(booking.duration) || 30; // Default to 30 minutes if not specified

                    // Create Date objects for start and end times
                    const startDate = new Date();
                    startDate.setHours(hours, minutes, 0);

                    const endDate = new Date(startDate);
                    endDate.setMinutes(startDate.getMinutes() + duration);

                    const startTime = startDate.toLocaleTimeString('en-US', {
                        hour: 'numeric',
                        minute: '2-digit',
                        hour12: false
                    }).replace(/\s/g, '');

                    const endTime = endDate.toLocaleTimeString('en-US', {
                        hour: 'numeric',
                        minute: '2-digit',
                        hour12: true
                    }).replace(/\s/g, '');

                    const timeRange = `${startTime} - ${endTime}`;

                    // Determine if the booking is completed or cancelled
                    const isCompleted = booking.status === 'completed';
                    const isCancelled = booking.status === 'cancelled';
                    
                    // CSS class for the booking card based on status
                    let bookingCardClass = 'booking-card';
                    if (isCompleted) bookingCardClass += ' completed';
                    if (isCancelled) bookingCardClass += ' cancelled';
                    
                    // Text for the complete button based on status
                    const completeButtonText = isCompleted ? 'Completed' : 'Mark as complete';
                    // CSS class for the complete button based on status
                    const completeButtonClass = isCompleted ? 'complete-btn completed' : 'complete-btn';
                    // Disabled attribute for the complete button if already completed or cancelled
                    const completeButtonDisabled = (isCompleted || isCancelled) ? 'disabled' : '';
                    // Disable edit button if booking is completed or cancelled
                    const editButtonDisabled = (isCompleted || isCancelled) ? 'disabled' : '';
                    // CSS class for the edit button based on booking status
                    const editButtonClass = (isCompleted || isCancelled) ? 'edit-btn disabled' : 'edit-btn';

                    return `
                    <div class="${bookingCardClass}">
                        <div class="booking-header">
                            <h4>${booking.clientName}</h4>
                            <span class="booking-time">${timeRange}</span>
                            ${isCancelled ? '<span class="cancelled-badge">Cancelled</span>' : ''}
                        </div>
                        <div class="booking-details">
                            <div class="booking-service">
                                <span>Service: ${booking.serviceName}</span>
                                <span>$${booking.cost}</span>
                            </div>
                            <div class="booking-actions">
                                <button onclick="viewBookingDetails('${booking.id}')" class="details-btn">
                                    <i class="fas fa-info-circle"></i> View Details
                                </button>
                                <button onclick="editBooking('${booking.id}')" class="${editButtonClass}" ${editButtonDisabled}>
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                                <button onclick="markComplete('${booking.id}')" class="${completeButtonClass}" ${completeButtonDisabled}>
                                    <i class="fas fa-check"></i> ${completeButtonText}
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                }).join('');
            }
        };

        // Initialize calendar
        calendar.init();

        // Global functions for booking actions
        window.viewBookingDetails = async (bookingId) => {
            try {
                const response = await fetch(`/api/bookings/${bookingId}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch booking details');
                }
                
                const booking = await response.json();
                
                // Create a modal to display booking details
                const modal = document.createElement('div');
                modal.className = 'booking-details-modal';
                
                const modalContent = document.createElement('div');
                modalContent.className = 'booking-details-content';
                
                const closeButton = document.createElement('span');
                closeButton.className = 'close-modal';
                closeButton.innerHTML = '&times;';
                closeButton.onclick = () => document.body.removeChild(modal);
                
                const notes = booking.notes ? booking.notes : 'No notes provided';
                const statusClass = booking.status === 'completed' ? 'status-completed' : 
                                   (booking.status === 'cancelled' ? 'status-cancelled' : 'status-booked');
                
                // Format date in a more readable form
                const bookingDate = new Date(booking.date);
                const formattedDate = bookingDate.toLocaleDateString('en-US', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
                
                modalContent.innerHTML = `
                    <h2 class="booking-details-title">Booking Details</h2>
                    
                    <div class="booking-details-status">
                        <span class="booking-status ${statusClass}">
                            ${booking.status === 'completed' ? 'Completed' : 
                             (booking.status === 'cancelled' ? 'Cancelled' : 'Active')}
                        </span>
                    </div>
                    
                    <div class="booking-details-section">
                        <h3 class="section-title">Client Information</h3>
                        <div class="detail-grid">
                            <div class="detail-item">
                                <span class="detail-label">Name</span>
                                <span class="detail-value">${booking.clientName}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Email</span>
                                <span class="detail-value">${booking.clientEmail}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Phone</span>
                                <span class="detail-value">${booking.clientPhone || 'Not provided'}</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="booking-details-section">
                        <h3 class="section-title">Service Details</h3>
                        <div class="detail-grid">
                            <div class="detail-item">
                                <span class="detail-label">Service</span>
                                <span class="detail-value">${booking.serviceName}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Date</span>
                                <span class="detail-value">${formattedDate}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Time</span>
                                <span class="detail-value">${booking.time}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Duration</span>
                                <span class="detail-value">${booking.duration} minutes</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Cost</span>
                                <span class="detail-value price">$${booking.cost}</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="booking-details-section">
                        <h3 class="section-title">Notes</h3>
                        <div class="notes-container">
                            ${notes}
                        </div>
                    </div>
                `;
                
                modal.appendChild(modalContent);
                modalContent.appendChild(closeButton);
                document.body.appendChild(modal);
                
                // Close when clicking outside the modal
                window.onclick = (event) => {
                    if (event.target === modal) {
                        document.body.removeChild(modal);
                    }
                };
                
            } catch (error) {
                console.error('Error fetching booking details:', error);
                alert('Failed to load booking details');
            }
        };

        window.editBooking = async (bookingId) => {
            try {
                const response = await fetch(`/api/bookings/${bookingId}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch booking details');
                }
                
                const booking = await response.json();
                
                // Check if booking is already completed
                if (booking.status === 'completed') {
                    alert('This booking is already completed and cannot be edited.');
                    return;
                }
                
                // Create a modal for editing
                const modal = document.createElement('div');
                modal.className = 'booking-details-modal';
                
                const modalContent = document.createElement('div');
                modalContent.className = 'booking-details-content';
                
                const closeButton = document.createElement('span');
                closeButton.className = 'close-modal';
                closeButton.innerHTML = '&times;';
                closeButton.onclick = () => document.body.removeChild(modal);
                
                modalContent.innerHTML = `
                    <h2>Edit Booking</h2>
                    <div class="edit-booking-options">
                        <h3>What would you like to do?</h3>
                        <div class="edit-booking-buttons">
                            <button id="rescheduleBtn" class="edit-option-btn">
                                <i class="fas fa-calendar-alt"></i> Reschedule
                            </button>
                            <button id="cancelBookingBtn" class="cancel-option-btn">
                                <i class="fas fa-times-circle"></i> Cancel Booking
                            </button>
                        </div>
                    </div>
                    
                    <div id="rescheduleForm" style="display: none;">
                        <h3>Reschedule Booking</h3>
                        <form id="bookingRescheduleForm">
                            <div class="form-group">
                                <label for="newDate">New Date:</label>
                                <input type="date" id="newDate" value="${booking.date}" required>
                            </div>
                            <div class="form-group">
                                <label for="newTime">New Time:</label>
                                <input type="time" id="newTime" value="${booking.time}" required>
                            </div>
                            <div class="form-buttons">
                                <button type="button" id="backToOptions" class="cancel-btn">Back</button>
                                <button type="submit" class="save-btn">Save Changes</button>
                            </div>
                        </form>
                    </div>
                    
                    <div id="cancelConfirm" style="display: none;">
                        <h3>Cancel Booking</h3>
                        <p>Are you sure you want to cancel this booking? This action cannot be undone.</p>
                        <div class="form-buttons">
                            <button type="button" id="backFromCancel" class="cancel-btn">Back</button>
                            <button type="button" id="confirmCancel" class="delete-btn">Yes, Cancel Booking</button>
                        </div>
                    </div>
                `;
                
                modal.appendChild(modalContent);
                modalContent.appendChild(closeButton);
                document.body.appendChild(modal);
                
                // Setup event handlers
                document.getElementById('rescheduleBtn').addEventListener('click', () => {
                    document.querySelector('.edit-booking-options').style.display = 'none';
                    document.getElementById('rescheduleForm').style.display = 'block';
                });
                
                document.getElementById('cancelBookingBtn').addEventListener('click', () => {
                    document.querySelector('.edit-booking-options').style.display = 'none';
                    document.getElementById('cancelConfirm').style.display = 'block';
                });
                
                document.getElementById('backToOptions').addEventListener('click', () => {
                    document.getElementById('rescheduleForm').style.display = 'none';
                    document.querySelector('.edit-booking-options').style.display = 'block';
                });
                
                document.getElementById('backFromCancel').addEventListener('click', () => {
                    document.getElementById('cancelConfirm').style.display = 'none';
                    document.querySelector('.edit-booking-options').style.display = 'block';
                });
                
                document.getElementById('confirmCancel').addEventListener('click', async () => {
                    try {
                        const cancelResponse = await fetch(`/api/bookings/${bookingId}/cancel`, {
                            method: 'POST'
                        });
                        
                        if (cancelResponse.ok) {
                            document.body.removeChild(modal);
                            calendar.loadBookings(calendar.selectedDate);
                            alert('Booking cancelled successfully');
                        } else {
                            throw new Error('Failed to cancel booking');
                        }
                    } catch (error) {
                        console.error('Error cancelling booking:', error);
                        alert('Failed to cancel booking');
                    }
                });
                
                document.getElementById('bookingRescheduleForm').addEventListener('submit', async (e) => {
                    e.preventDefault();
                    
                    const newDate = document.getElementById('newDate').value;
                    const newTime = document.getElementById('newTime').value;
                    
                    try {
                        const rescheduleResponse = await fetch(`/api/bookings/${bookingId}/reschedule`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                date: newDate,
                                time: newTime
                            })
                        });
                        
                        if (rescheduleResponse.ok) {
                            document.body.removeChild(modal);
                            calendar.loadBookings(calendar.selectedDate);
                            alert('Booking rescheduled successfully');
                        } else {
                            throw new Error('Failed to reschedule booking');
                        }
                    } catch (error) {
                        console.error('Error rescheduling booking:', error);
                        alert('Failed to reschedule booking');
                    }
                });
                
                // Close when clicking outside the modal
                window.onclick = (event) => {
                    if (event.target === modal) {
                        document.body.removeChild(modal);
                    }
                };
                
            } catch (error) {
                console.error('Error setting up booking edit:', error);
                alert('Failed to load booking for editing');
            }
        };

        window.markComplete = async (bookingId) => {
            try {
                const response = await fetch(`/api/bookings/${bookingId}/complete`, {
                    method: 'POST'
                });

                if (response.ok) {
                    calendar.loadBookings(calendar.selectedDate);
                } else {
                    throw new Error('Failed to mark booking as complete');
                }
            } catch (error) {
                console.error('Error marking booking complete:', error);
                alert('Failed to mark booking as complete');
            }
        };
    });
</script>