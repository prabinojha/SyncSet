<!DOCTYPE html>
<html lang="en">
<%- include('includes/head', {title: 'Reset Password'}) %>

<body>
    <%- include('includes/header') %>
    <main>
        <div class="resetContainer">
            <div class="resetCard">
                <h1>Reset Your Password</h1>
                <p class="resetInstructions">Please enter your new password below.</p>
                
                <form id="resetPasswordForm">
                    <input type="hidden" id="oobCode" value="<%= oobCode %>">
                    
                    <div class="passwordContainer">
                        <label for="newPassword">New Password</label>
                        <input type="password" id="newPassword" placeholder="Enter your new password" required>
                        <div class="passwordStrength">
                            <div class="strengthBar"></div>
                            <p class="strengthText">Password strength</p>
                        </div>
                    </div>
                    
                    <div class="passwordContainer">
                        <label for="confirmPassword">Confirm Password</label>
                        <input type="password" id="confirmPassword" placeholder="Confirm your password" required>
                        <p id="passwordMatch" class="passwordMatch"></p>
                    </div>
                    
                    <ul class="passwordRequirements">
                        <li id="lengthReq"><span></span>At least 8 characters</li>
                        <li id="upperReq"><span></span>At least 1 uppercase letter</li>
                        <li id="lowerReq"><span></span>At least 1 lowercase letter</li>
                        <li id="numberReq"><span></span>At least 1 number</li>
                        <li id="specialReq"><span></span>At least 1 special character</li>
                    </ul>
                    
                    <button type="submit" id="resetButton" disabled>Reset Password</button>
                </form>
                
                <p id="resetMessage" class="resetMessage"></p>
            </div>
        </div>
    </main>
    <script>
        // Firebase requires the external auth library to be loaded
        // We'll simulate this using fetch API to confirm password reset
        
        const passwordInput = document.getElementById('newPassword');
        const confirmPasswordInput = document.getElementById('confirmPassword');
        const strengthBar = document.querySelector('.strengthBar');
        const strengthText = document.querySelector('.strengthText');
        const passwordMatch = document.getElementById('passwordMatch');
        const resetButton = document.getElementById('resetButton');
        const resetMessage = document.getElementById('resetMessage');
        const oobCode = document.getElementById('oobCode').value;
        
        // Password strength requirements
        const lengthReq = document.getElementById('lengthReq');
        const upperReq = document.getElementById('upperReq');
        const lowerReq = document.getElementById('lowerReq');
        const numberReq = document.getElementById('numberReq');
        const specialReq = document.getElementById('specialReq');
        
        // Password strength checker
        passwordInput.addEventListener('input', () => {
            checkPasswordStrength();
            checkPasswordsMatch();
        });
        
        // Check if passwords match
        confirmPasswordInput.addEventListener('input', checkPasswordsMatch);
        
        function checkPasswordStrength() {
            const password = passwordInput.value;
            let strength = 0;
            let message = '';
            
            // Check length
            const isLengthValid = password.length >= 8;
            if (isLengthValid) {
                strength += 20;
                lengthReq.classList.add('valid');
            } else {
                lengthReq.classList.remove('valid');
            }
            
            // Check uppercase
            const hasUppercase = /[A-Z]/.test(password);
            if (hasUppercase) {
                strength += 20;
                upperReq.classList.add('valid');
            } else {
                upperReq.classList.remove('valid');
            }
            
            // Check lowercase
            const hasLowercase = /[a-z]/.test(password);
            if (hasLowercase) {
                strength += 20;
                lowerReq.classList.add('valid');
            } else {
                lowerReq.classList.remove('valid');
            }
            
            // Check numbers
            const hasNumber = /[0-9]/.test(password);
            if (hasNumber) {
                strength += 20;
                numberReq.classList.add('valid');
            } else {
                numberReq.classList.remove('valid');
            }
            
            // Check special characters
            const hasSpecial = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password);
            if (hasSpecial) {
                strength += 20;
                specialReq.classList.add('valid');
            } else {
                specialReq.classList.remove('valid');
            }
            
            // Update UI
            strengthBar.style.width = `${strength}%`;
            
            if (strength < 40) {
                strengthBar.style.backgroundColor = '#ff4d4d';
                message = 'Weak';
            } else if (strength < 80) {
                strengthBar.style.backgroundColor = '#ffdd59';
                message = 'Medium';
            } else {
                strengthBar.style.backgroundColor = '#4cd137';
                message = 'Strong';
            }
            
            strengthText.textContent = message;
            validateForm();
        }
        
        function checkPasswordsMatch() {
            const password = passwordInput.value;
            const confirmPassword = confirmPasswordInput.value;
            
            if (!confirmPassword) {
                passwordMatch.textContent = '';
                return;
            }
            
            if (password === confirmPassword) {
                passwordMatch.textContent = 'Passwords match';
                passwordMatch.className = 'passwordMatch success';
            } else {
                passwordMatch.textContent = 'Passwords do not match';
                passwordMatch.className = 'passwordMatch error';
            }
            
            validateForm();
        }
        
        function validateForm() {
            const password = passwordInput.value;
            const confirmPassword = confirmPasswordInput.value;
            
            // Count valid requirements
            const validRequirements = document.querySelectorAll('.passwordRequirements .valid').length;
            
            // Enable button only if passwords match and strength is sufficient
            if (password === confirmPassword && 
                password !== '' && 
                validRequirements >= 3) {
                resetButton.disabled = false;
            } else {
                resetButton.disabled = true;
            }
        }
        
        // Handle form submission
        document.getElementById('resetPasswordForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            resetButton.disabled = true;
            resetButton.textContent = 'Resetting...';
            
            const newPassword = passwordInput.value;
            
            try {
                const response = await fetch('/confirm-reset-password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        oobCode,
                        newPassword
                    }),
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    resetMessage.textContent = 'Password reset successful! You can now login with your new password.';
                    resetMessage.className = 'resetMessage success';
                    
                    // Redirect to login page after 3 seconds
                    setTimeout(() => {
                        window.location.href = '/login';
                    }, 3000);
                } else {
                    resetMessage.textContent = result.error || 'Failed to reset password. Please try again.';
                    resetMessage.className = 'resetMessage error';
                    resetButton.disabled = false;
                    resetButton.textContent = 'Reset Password';
                }
            } catch (error) {
                resetMessage.textContent = 'An error occurred. Please try again.';
                resetMessage.className = 'resetMessage error';
                resetButton.disabled = false;
                resetButton.textContent = 'Reset Password';
            }
        });
    </script>
    <style>
        main {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: calc(100vh - 70px);
            background-color: #f9fafb;
        }
        
        .resetContainer {
            width: 100%;
            max-width: 500px;
            padding: 20px;
        }
        
        .resetCard {
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06);
            padding: 32px;
        }
        
        h1 {
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 16px;
            color: #1a1a1a;
            text-align: center;
        }
        
        .resetInstructions {
            font-size: 16px;
            line-height: 1.5;
            margin-bottom: 24px;
            color: #5f6368;
            text-align: center;
        }
        
        form {
            display: flex;
            flex-direction: column;
        }
        
        .passwordContainer {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-size: 14px;
            font-weight: 500;
            color: #3c4043;
        }
        
        input[type="password"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #dadce0;
            border-radius: 4px;
            font-size: 14px;
        }
        
        .passwordStrength {
            margin-top: 8px;
            display: flex;
            align-items: center;
        }
        
        .strengthBar {
            flex: 1;
            height: 4px;
            background-color: #e6e6e6;
            border-radius: 2px;
            overflow: hidden;
            margin-right: 10px;
            width: 0;
            transition: width 0.3s, background-color 0.3s;
        }
        
        .strengthText {
            font-size: 12px;
            color: #5f6368;
            margin: 0;
            min-width: 60px;
        }
        
        .passwordMatch {
            font-size: 12px;
            margin-top: 8px;
            min-height: 16px;
        }
        
        .passwordRequirements {
            list-style: none;
            padding: 0;
            margin: 0 0 24px;
            font-size: 12px;
            color: #777;
            background-color: #f9f9f9;
            border-radius: 4px;
            padding: 15px;
            border: 1px solid #eaeaea;
        }
        
        .passwordRequirements li {
            margin-bottom: 8px;
            display: flex;
            align-items: center;
        }
        
        .passwordRequirements li:last-child {
            margin-bottom: 0;
        }
        
        .passwordRequirements li span {
            width: 16px;
            height: 16px;
            display: inline-block;
            margin-right: 8px;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24'%3E%3Cpath fill='%23aaa' d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z'/%3E%3C/svg%3E");
            background-size: contain;
        }
        
        .passwordRequirements li.valid span {
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24'%3E%3Cpath fill='%234cd137' d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z'/%3E%3C/svg%3E");
        }
        
        button {
            padding: 12px 16px;
            background-color: #4285f4;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        button:hover:not(:disabled) {
            background-color: #3367d6;
        }
        
        button:disabled {
            background-color: #9aa0a6;
            cursor: not-allowed;
        }
        
        .resetMessage {
            margin-top: 24px;
            padding: 12px;
            border-radius: 4px;
            font-size: 14px;
            text-align: center;
            display: none;
        }
        
        .resetMessage:not(:empty) {
            display: block;
        }
        
        .success {
            background-color: #e6f4ea;
            color: #137333;
        }
        
        .error {
            background-color: #fce8e6;
            color: #c5221f;
        }
    </style>
</body>

</html> 